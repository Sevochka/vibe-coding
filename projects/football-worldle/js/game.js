// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
  currentWord: '',
  currentGuess: '',
  guesses: [],
  currentRow: 0,
  maxAttempts: 6,
  gameStatus: 'playing', // 'playing', 'won', 'lost'
  difficultyLevel: 'beginner',
  playerPoints: 0,
  goalCount: 0,
  saveCount: 0,
  currentTheme: null,
  streakCount: 0,
  usedHint: false,
  playerLevel: difficultyLevels[0],
  earnedAchievements: [],
  keyboardStatus: {},
  multiplayerMode: false,
  currentPlayer: 1,
  player1Score: 0,
  player2Score: 0,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
const initGame = () => {
  resetGameState();
  chooseRandomWord();
  renderBoard();
  renderKeyboard();
  updateScoreboard();
  updatePlayerStatus();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞ –¥–Ω—è
  const today = new Date().toLocaleDateString('ru-RU');
  if (localStorage.getItem('themeDay') === today) {
    gameState.currentTheme = localStorage.getItem('currentTheme');
    showThemeDay(gameState.currentTheme);
  } else {
    // –ö–∞–∂–¥—ã–µ 3 –¥–Ω—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
    const randomDayCheck = Math.floor(Date.now() / 86400000) % 3;
    if (randomDayCheck === 0) {
      setRandomThemeDay();
    }
  }
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –æ—á–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
  loadPlayerProgress();
};

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const resetGameState = () => {
  gameState.currentGuess = '';
  gameState.guesses = [];
  gameState.currentRow = 0;
  gameState.gameStatus = 'playing';
  gameState.usedHint = false;
  gameState.keyboardStatus = {};
  
  // –û—á–∏—Å—Ç–∫–∞ –¥–æ—Å–∫–∏
  document.querySelectorAll('.letter-box').forEach(box => {
    box.textContent = '';
    box.className = 'letter-box';
  });
  
  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  document.querySelector('.tactical-hint').textContent = '';
  
  // –°–±—Ä–æ—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  document.querySelectorAll('.key').forEach(key => {
    key.className = key.className.includes('wide') ? 'key wide' : 'key';
  });
};

// –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞
const chooseRandomWord = () => {
  let wordList;
  
  if (gameState.currentTheme) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞
    wordList = gameWords[gameState.currentTheme];
  } else {
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    wordList = gameWords[gameState.difficultyLevel];
  }
  
  const randomIndex = Math.floor(Math.random() * wordList.length);
  gameState.currentWord = wordList[randomIndex];
  
  // –ï—Å–ª–∏ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª (–º–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–¥–∏–æ–Ω–æ–≤), –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ "_"
  if (gameState.currentWord.includes(' ')) {
    gameState.currentWord = gameState.currentWord.replace(/ /g, '_');
  }
  
  console.log('Current word:', gameState.currentWord); // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–≤—ã –∫ —Ç–µ–∫—É—â–µ–π –¥–æ–≥–∞–¥–∫–µ
const addLetter = (letter) => {
  if (gameState.gameStatus !== 'playing') return;
  if (gameState.currentGuess.length < gameState.currentWord.length) {
    gameState.currentGuess += letter;
    updateBoard();
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã
const removeLetter = () => {
  if (gameState.gameStatus !== 'playing') return;
  if (gameState.currentGuess.length > 0) {
    gameState.currentGuess = gameState.currentGuess.slice(0, -1);
    updateBoard();
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–æ–≥–∞–¥–∫–∏
const submitGuess = () => {
  if (gameState.gameStatus !== 'playing') return;
  if (gameState.currentGuess.length !== gameState.currentWord.length) {
    showMessage('–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é!');
    shakeCurrentRow();
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –∏–ª–∏ "_"
  const validInput = /^[–ê-–Ø–Å_]+$/i.test(gameState.currentGuess);
  if (!validInput) {
    showMessage('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã!');
    shakeCurrentRow();
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result = checkGuess(gameState.currentGuess);
  gameState.guesses.push(gameState.currentGuess);
  
  // –ê–Ω–∏–º–∏—Ä—É–µ–º –∏ —Ä–∞—Å–∫—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  animateResult(result);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  updateKeyboardStatus(gameState.currentGuess, result);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–±–µ–¥—É
  if (gameState.currentGuess.toUpperCase() === gameState.currentWord.toUpperCase()) {
    gameWon();
  } else if (gameState.currentRow >= gameState.maxAttempts - 1) {
    gameLost();
  } else {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
    gameState.currentRow++;
    gameState.currentGuess = '';
    
    // –ï—Å–ª–∏ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä, –º–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
    if (gameState.multiplayerMode) {
      gameState.currentPlayer = gameState.currentPlayer === 1 ? 2 : 1;
      updatePlayerTurn();
    }
    
    // –î–∞–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
    provideTacticalHint();
  }
  
  updateBoard();
  saveGameProgress();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≥–∞–¥–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const checkGuess = (guess) => {
  const result = Array(guess.length).fill('absent');
  const wordMap = {};
  
  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª–æ–≤–∞
  [...gameState.currentWord.toUpperCase()].forEach((letter, index) => {
    if (!wordMap[letter]) wordMap[letter] = 0;
    wordMap[letter]++;
  });
  
  // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  [...guess.toUpperCase()].forEach((letter, index) => {
    if (letter === gameState.currentWord[index].toUpperCase()) {
      result[index] = 'correct';
      wordMap[letter]--;
    }
  });
  
  // –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –±—É–∫–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
  [...guess.toUpperCase()].forEach((letter, index) => {
    if (result[index] !== 'correct' && wordMap[letter] && wordMap[letter] > 0) {
      result[index] = 'present';
      wordMap[letter]--;
    }
  });
  
  return result;
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
const gameWon = () => {
  gameState.gameStatus = 'won';
  gameState.goalCount++;
  gameState.streakCount++;
  gameState.playerPoints += calculatePoints();
  showMessage('–ì–û–û–û–û–û–û–û–õ!!! üéâ');
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≥–æ–ª–∞
  createGoalAnimation();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  checkAchievements();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
  updatePlayerLevel();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  updateScoreboard();
  updatePlayerStatus();
  saveGameProgress();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–±–µ–¥—ã
  setTimeout(() => {
    showGameResult(true);
  }, 1500);
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
const gameLost = () => {
  gameState.gameStatus = 'lost';
  gameState.saveCount++;
  gameState.streakCount = 0;
  
  showMessage(`–°–µ–π–≤! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: ${gameState.currentWord}`);
  
  // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–µ–π–≤–∞
  createSaveAnimation();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  updateScoreboard();
  saveGameProgress();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
  setTimeout(() => {
    showGameResult(false);
  }, 1500);
};

// –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É
const calculatePoints = () => {
  // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  let basePoints = {
    'beginner': 50,
    'intermediate': 100,
    'advanced': 200,
    'legendary': 300,
  }[gameState.difficultyLevel];
  
  // –ë–æ–Ω—É—Å –∑–∞ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
  const attemptsBonus = (gameState.maxAttempts - gameState.currentRow) * 20;
  
  // –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä–∏—é
  const streakBonus = gameState.streakCount * 10;
  
  // –®—Ç—Ä–∞—Ñ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const hintPenalty = gameState.usedHint ? -30 : 0;
  
  return basePoints + attemptsBonus + streakBonus + hintPenalty;
};

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
const useHint = () => {
  if (gameState.usedHint || gameState.gameStatus !== 'playing') return;
  
  // –ù–∞—Ö–æ–¥–∏–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–æ—Ç–≥–∞–¥–∞–Ω–Ω—É—é –±—É–∫–≤—É
  const currentGuess = gameState.currentGuess.toUpperCase();
  const correctLetters = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–æ–≥–∞–¥–∫–∏ –∏ –Ω–∞—Ö–æ–¥–∏–º —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã
  gameState.guesses.forEach((guess, rowIndex) => {
    const result = checkGuess(guess);
    result.forEach((status, colIndex) => {
      if (status === 'correct') {
        correctLetters.push(colIndex);
      }
    });
  });
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –±—É–∫–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ç–≥–∞–¥–∞–Ω—ã
  const unknownIndices = [];
  for (let i = 0; i < gameState.currentWord.length; i++) {
    if (!correctLetters.includes(i)) {
      unknownIndices.push(i);
    }
  }
  
  if (unknownIndices.length === 0) {
    showMessage('–í—ã —É–∂–µ –æ—Ç–≥–∞–¥–∞–ª–∏ –≤—Å–µ –±—É–∫–≤—ã!');
    return;
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–æ—Ç–≥–∞–¥–∞–Ω–Ω—É—é –±—É–∫–≤—É
  const randomIndex = unknownIndices[Math.floor(Math.random() * unknownIndices.length)];
  const hintLetter = gameState.currentWord[randomIndex].toUpperCase();
  
  // –ó–∞–ø–æ–ª–Ω—è–µ–º —ç—Ç—É –±—É–∫–≤—É –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
  const boardRow = document.querySelectorAll('.board .row')[gameState.currentRow];
  const letterBox = boardRow.querySelectorAll('.letter-box')[randomIndex];
  letterBox.textContent = hintLetter;
  letterBox.classList.add('letter-correct', 'pop');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–æ–≥–∞–¥–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
  let newGuess = gameState.currentGuess.split('');
  while (newGuess.length < randomIndex) {
    newGuess.push('');
  }
  newGuess[randomIndex] = hintLetter;
  gameState.currentGuess = newGuess.join('');
  
  gameState.usedHint = true;
  document.getElementById('hintButton').disabled = true;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–∑–∞–º–µ–Ω—ã"
  showSubstitutionAnimation();
  
  showMessage('–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  checkAchievement('free_kick');
  
  saveGameProgress();
};

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
const switchDifficulty = (level) => {
  if (gameState.gameStatus !== 'playing' || gameState.guesses.length > 0) {
    return; // –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
  }
  
  gameState.difficultyLevel = level;
  resetGameState();
  chooseRandomWord();
  renderBoard(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–æ—Å–∫—É, —Ç–∞–∫ –∫–∞–∫ –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
  
  showMessage(`–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${level}`);
  saveGameProgress();
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
const saveGameProgress = () => {
  const progressData = {
    playerPoints: gameState.playerPoints,
    goalCount: gameState.goalCount,
    saveCount: gameState.saveCount,
    streakCount: gameState.streakCount,
    difficultyLevel: gameState.difficultyLevel,
    playerLevel: gameState.playerLevel,
    earnedAchievements: gameState.earnedAchievements,
    lastPlayed: new Date().toISOString(),
  };
  
  localStorage.setItem('footballWorldleProgress', JSON.stringify(progressData));
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞
const loadPlayerProgress = () => {
  const savedProgress = localStorage.getItem('footballWorldleProgress');
  if (savedProgress) {
    const progress = JSON.parse(savedProgress);
    
    gameState.playerPoints = progress.playerPoints || 0;
    gameState.goalCount = progress.goalCount || 0;
    gameState.saveCount = progress.saveCount || 0;
    gameState.streakCount = progress.streakCount || 0;
    gameState.difficultyLevel = progress.difficultyLevel || 'beginner';
    gameState.playerLevel = progress.playerLevel || difficultyLevels[0];
    gameState.earnedAchievements = progress.earnedAchievements || [];
    
    updatePlayerLevel();
    updatePlayerStatus();
    updateScoreboard();
  }
};